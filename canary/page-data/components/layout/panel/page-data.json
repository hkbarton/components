{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/layout/panel/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"debb72d5-356f-5eee-8f42-25b8876ba286","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Panel\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Panel />\"), \" component displays content with directional animation by using prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"direction\"), \" - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" currently. The elements to be displayed as the compoennt must be\\npassed as the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Panels />\"), \" should be the parent component grouping all the elements involved on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Panel. The \"), \"Panel Heading\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"can be defined as a string or a ReactNode and will be displayed above the main\"), \"content`.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [open, setOpen] = useState(false)\\n  const toggleOpen = () => setExplore(!open)\\n\\n  const title = (\\n    <>\\n      <Icon icon={<ArrowLeft />} m=\\\"xsmall\\\" />\\n      Left\\n    </>\\n  )\\n\\n  return (\\n    <Panels>\\n      <List iconGutter>\\n        <Panel\\n          content={'content from Right...'}\\n          direction=\\\"right\\\"\\n          title=\\\"Right\\\"\\n        >\\n          <ListItem icon={<ArrowBack />}>Right</ListItem>\\n        </Panel>\\n        <Panel content={'content from Left...'} direction=\\\"left\\\" title=\\\"Left\\\">\\n          <ListItem icon={<ArrowForward />}>Left</ListItem>\\n        </Panel>\\n        <ListItem disabled>Not a panel</ListItem>\\n        <ListItem disabled>Not a panel</ListItem>\\n      </List>\\n    </Panels>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"usePanel\"), mdx(\"p\", null, \"We provide a custom hook that returns the opener function and rendered panel.\\nNote: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"panel\"), \" needs to be placed before \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \". The order in which the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"panel\"), \" will be render metters for the component to be rendered correctly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [isOpen, setOpen] = useState(false)\\n  const open = () => setOpen(true)\\n  const canClose = () => true\\n\\n  const { panel } = usePanel({\\n    canClose,\\n    content: 'Panel content',\\n    direction: 'left',\\n    isOpen,\\n    setOpen,\\n    title: 'Panel Hook',\\n  })\\n\\n  return (\\n    <>\\n      {panel}\\n      <List>\\n        <ListItem onClick={open} icon={<Done />}>\\n          Option A\\n        </ListItem>\\n        <ListItem disabled icon={<Done />}>\\n          Option B\\n        </ListItem>\\n      </List>\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Panel"}}},"pageContext":{"id":"debb72d5-356f-5eee-8f42-25b8876ba286"}},"staticQueryHashes":["1992130076","2337259409","4275213719","4275213719"]}