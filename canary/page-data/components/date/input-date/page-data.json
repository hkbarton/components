{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/date/input-date/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"1e43739f-5202-53a6-8805-9a7bebea81d2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputDate\",\n  \"github\": \"Form/Inputs/InputDate/InputDate.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Message, {\n    mdxType: \"Message\"\n  }, \"InputDate\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" provides a text input and calendar to select a single date, which can be used as a form input or filter.\"), mdx(\"h2\", null, \"Value & Default Value\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" can be initialized with a default selected date.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<InputDate value={new Date('February 3, 2009')} />\\n<InputDate defaultValue={new Date('June 3, 2019')} />\\n\")), mdx(\"h2\", null, \"Change Event\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" accepts a single event callback: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \". The handler will receive a javascript \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [selectedDate, setSelectedDate] = useState(new Date())\\n  const handleChange = (date) => {\\n    setSelectedDate(date)\\n  }\\n  return (\\n    <Space gap=\\\"xxlarge\\\">\\n      <InputDate onChange={handleChange} defaultValue={selectedDate} />\\n      <Box p=\\\"large\\\" height=\\\"100%\\\" borderLeft=\\\"1px solid #ccc\\\">\\n        <Heading>Selected:</Heading>\\n        <Text color=\\\"secondary\\\">\\n          <DateFormat>{selectedDate}</DateFormat>\\n        </Text>\\n      </Box>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Date Validation\"), mdx(\"h3\", null, \"validationType\"), mdx(\"p\", null, \"If you handle form validation externally (such as treating this date field as required), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" accepts the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationType\"), \" prop to render an error state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<InputDate validationType=\\\"error\\\" />\\n\")), mdx(\"h3\", null, \"onValidationFail\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" has built-in validation to verify that users enter a valid date string when manually typing into the provided textarea. If you wish to build into this validation, you can pass an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" callback which will fire on blur if the text value does not match expected localized format.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [isValid, setIsValid] = useState(true)\\n  const handleChange = () => setIsValid(true)\\n  const handleValidationFail = () => setIsValid(false)\\n\\n  const message = isValid ? 'Valid Input' : 'Invalid Input'\\n  const color = isValid ? undefined : 'critical'\\n\\n  return (\\n    <Space gap=\\\"xxxlarge\\\">\\n      <InputDate\\n        onChange={handleChange}\\n        onValidationFail={handleValidationFail}\\n      />\\n      <SpaceVertical>\\n        <Paragraph color=\\\"secondary\\\">\\n          INSTRUCTIONS: Try typing an invalid date string (ex:\\n          'not/a/valid/date') and clicking or tabbing away to trigger blur\\n          event.\\n        </Paragraph>\\n        <Heading>Result:</Heading>\\n        <Text color={color}>{message}</Text>\\n      </SpaceVertical>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18n\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" acccepts two different props for use in localizing calendar output. The first is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dateStringLocale\"), \" accepts a country code and is used to format the rendered date string in the input box (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"06/04/2020\"), \"). The second is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localization\"), \", which is used to translate the calendar format and naming.\"), mdx(\"h3\", null, \"dateStringLocale\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Grid columns={2}>\\n  <FieldDate\\n    dateStringLocale=\\\"ko\\\"\\n    label=\\\"Korea (YYYY.MM.DD)\\\"\\n    value={new Date(Date.now())}\\n  />\\n  <FieldDate\\n    dateStringLocale=\\\"it\\\"\\n    label=\\\"Italy (DD/MM/YYYY)\\\"\\n    value={new Date(Date.now())}\\n  />\\n</Grid>\\n\")), mdx(\"h3\", null, \"localization\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localization\"), \" prop can be used to provide translation strings for the names of the months, the days of the week, and what day the week starts on (usually \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const months = [\\n    'Gennaio',\\n    'Febbraio',\\n    'Marzo',\\n    'Aprile',\\n    'Maggio',\\n    'Giugno',\\n    'Luglio',\\n    'Agosto',\\n    'Settembre',\\n    'Ottobre',\\n    'Novembre',\\n    'Dicembre',\\n  ]\\n  const weekdaysShort = ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa']\\n  const firstDayOfWeek = 1 // monday\\n  const localizationProps = { months, weekdaysShort, firstDayOfWeek }\\n  return <InputDate localization={localizationProps} dateStringLocale=\\\"it\\\" />\\n}\\n\")), mdx(\"h2\", null, \"Composing InputDate in a Popover\"), mdx(\"p\", null, \"A common UI pattern is to combine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/canary/components/overlays/popover\"\n  }), \"Popover\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/canary/components/actions/button\"\n  }), \"Button\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/components/canary/components/content/date-time-format\"\n  }), \"DateFormat\"), \". This enables the full calendar functionality without having to take up so much space on the page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [selectedDate, setSelectedDate] = useState(new Date(Date.now()))\\n  return (\\n    <Popover\\n      content={\\n        <Box p=\\\"small\\\">\\n          <InputDate defaultValue={selectedDate} onChange={setSelectedDate} />\\n        </Box>\\n      }\\n    >\\n      <Button>\\n        <DateFormat>{selectedDate}</DateFormat>\\n      </Button>\\n    </Popover>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"Form/Inputs/InputDate/InputDate.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputDate"}}},"pageContext":{"id":"1e43739f-5202-53a6-8805-9a7bebea81d2"}},"staticQueryHashes":["1992130076","2337259409","4275213719","4275213719"]}