{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/accordion/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"75ab86e7-6231-5636-9a3b-0a62f3223e6d","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accordion\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" hides and shows content on click like a collapsible section.\"), mdx(\"p\", null, \"The child of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" is rendered as a label on the disclosure, and can be either be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \" or a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactNode\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"content\"), \" prop determines what content is hidden or shownby the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to set the ID of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \". In addition, IDs will be auto-generated for the underlying disclosure element and content container element based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \"'s ID.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onOpen\"), \" props if you would like to trigger callbacks on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" open or close.\"), mdx(\"p\", null, \"If you want your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" open by default, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultOpen\"), \" prop.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultOpen\"), \" should only be used when using an uncontrolled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \". For more details on controlled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \"s, see the \\\"Controlling an Accordion\\\" section.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion content=\\\"Cheddar\\\">\\n  Show me the cheese!\\n</Accordion>\\n\\n<Accordion defaultOpen onClose={() => alert('Closing doors')} onOpen={() => alert('Opening doors')} content=\\\"Swiss\\\">\\n  Show me some other cheese!\\n</Accordion>\\n\")), mdx(\"h2\", null, \"Basic Accordion behavior\"), mdx(\"p\", null, \"Clicking on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \"'s disclosure controls the appearance of its content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion indicatorPosition=\\\"left\\\" content=\\\"pretty great\\\">\\n  <Space between align=\\\"center\\\">\\n    <span>Cheese is...</span>\\n    <Icon color=\\\"neutral\\\" icon={<Help />} size={20} />\\n  </Space>\\n</Accordion>\\n\")), mdx(\"h2\", null, \"Styling an Accordion's indicator\"), mdx(\"p\", null, \"You can customize an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" indicator icon's size, position, and icon type via props.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicatorPosition\"), \" prop to set the indicator's position on either the left or right side of the disclosure.\"), mdx(\"p\", null, \"NOTE: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicatorPosition=\\\"left\\\"\"), \" will also change the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicatorIcons\"), \" as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion indicatorPosition=\\\"left\\\" content=\\\"Cheddar\\\">\\n  Show me the cheese!\\n</Accordion>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicatorSize\"), \" prop to set the size of your indicator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion indicatorSize=\\\"xxlarge\\\" content=\\\"Cheddar\\\">\\n  Show me the cheese!\\n</Accordion>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop to customize the color of the indicator and any text.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion color=\\\"key\\\" content=\\\"Cheddar\\\">\\n  Show me the cheese!\\n</Accordion>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicatorIcons\"), \" prop to customize which icons represent an open or closed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \".\"), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CaretDown\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CaretUp\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon>\"), \"s are used.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Accordion\\n  indicatorIcons={{ close: 'Close', open: 'FieldYesNo' }}\\n  content=\\\"Cheddar\\\"\\n>\\n  Show me the cheese!\\n</Accordion>\\n\")), mdx(\"h2\", null, \"Controlling an Accordion\"), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" is an uncontrolled component and maintains its own opened/closed state.\"), mdx(\"p\", null, \"However, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" props to explicitly control the state of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \".\"), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop receives \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Accordion>\"), \" will reveal its content. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", your content will be hidden.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" prop should receive a function that has one parameter: a boolean. When the disclosure is clicked, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" callback will be triggered and passed the opposite boolean of the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [isOpen, setIsOpen] = useState(true)\\n\\n  return (\\n    <Accordion isOpen={isOpen} toggleOpen={setIsOpen} content=\\\"Cheddar\\\">\\n      Show me the cheese!\\n    </Accordion>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Accordion"}}},"pageContext":{"id":"75ab86e7-6231-5636-9a3b-0a62f3223e6d"}},"staticQueryHashes":["1992130076","2337259409","4275213719","4275213719"]}