{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/tabs/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"72363394-5b2a-5b24-b75c-1afde5bbdbe3","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tabs\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tabs\"), \" expects to receive a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" with one or more \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" components. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanels\"), \" expects \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \"(s). \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tabs\"), \" manages the visibility of a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \" based on its internal state.\"), mdx(\"p\", null, \"The order in which elements are placed inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanels\"), \" defines the relationship between them. The first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" is related to the first \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \" and so on.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs>\\n  <TabList>\\n    <Tab>Dog</Tab>\\n    <Tab>Cat</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\uD83D\\uDC36 Dog</TabPanel>\\n    <TabPanel>\\uD83D\\uDC31 Cat</TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h2\", null, \"Horizonal Scroll\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tabs\"), \" supports scrolling when the tabs' combined width cannot be accomdated within the viewport width. - Try scrolling left-right.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs>\\n  <TabList>\\n    <Tab>Really long tab title that should help demonstrate side-scroll</Tab>\\n    <Tab>Yet-another-tab-title to get things width enough</Tab>\\n    <Tab>Really, you must be obsessed with these long tab titles?</Tab>\\n    <Tab>Okay, okay, we get it you want to see scrolling in action...</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>Tab Content 1</TabPanel>\\n    <TabPanel>Tab Content 2</TabPanel>\\n    <TabPanel>Tab Content 3</TabPanel>\\n    <TabPanel>Tab Content 4</TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h2\", null, \"Disabled Tab(s)\"), mdx(\"p\", null, \"To create a disabled Tab add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" prop. NOTE: A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabPanel\"), \" must still exist for disabled tabs to allow for tabs to keep the index positions in sync.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs>\\n  <TabList>\\n    <Tab>Cat</Tab>\\n    <Tab disabled>Dog</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\uD83D\\uDC31 Cat</TabPanel>\\n    <TabPanel>\\uD83D\\uDC36 Dog</TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h2\", null, \"Distribute Attribute\"), mdx(\"p\", null, \"Using the distribute prop on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TabList\"), \" will equally distributed each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tab\"), \" in the container.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Tabs>\\n  <TabList distribute>\\n    <Tab>Rebecca Purple</Tab>\\n    <Tab>Coral</Tab>\\n    <Tab>Forest Green</Tab>\\n    <Tab>Cornflower Blue</Tab>\\n  </TabList>\\n  <TabPanels>\\n    <TabPanel>\\n      <div\\n        style={{\\n          backgroundColor: 'RebeccaPurple',\\n          height: '350px',\\n        }}\\n      />\\n    </TabPanel>\\n    <TabPanel>\\n      <div\\n        style={{\\n          backgroundColor: 'coral',\\n          height: '350px',\\n        }}\\n      />\\n    </TabPanel>\\n    <TabPanel>\\n      <div\\n        style={{\\n          backgroundColor: 'ForestGreen',\\n          height: '350px',\\n        }}\\n      />\\n    </TabPanel>\\n    <TabPanel>\\n      <div\\n        style={{\\n          backgroundColor: 'CornflowerBlue',\\n          height: '350px',\\n        }}\\n      />\\n    </TabPanel>\\n  </TabPanels>\\n</Tabs>\\n\")), mdx(\"h2\", null, \"Controlled Tab\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \";() => {\\n  const [currentTabIndex, setTab] = useState(0)\\n\\n  return (\\n    <>\\n      <button onClick={() => setTab(0)}>Go to A</button>\\n      <button onClick={() => setTab(1)}>Go to B</button>\\n\\n      <Tabs index={currentTabIndex} onChange={setTab}>\\n        <TabList>\\n          <Tab>A</Tab>\\n          <Tab>B</Tab>\\n        </TabList>\\n        <TabPanels>\\n          <TabPanel>A</TabPanel>\\n          <TabPanel>B</TabPanel>\\n        </TabPanels>\\n      </Tabs>\\n    </>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Tabs"}}},"pageContext":{"id":"72363394-5b2a-5b24-b75c-1afde5bbdbe3"}},"staticQueryHashes":["1992130076","2337259409","4275213719","4275213719"]}